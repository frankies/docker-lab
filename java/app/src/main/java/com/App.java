/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com;
import java.nio.file.Files;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
 
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        // System.out.println(new App().getGreeting());
      
        List<List<String>> greetingList = new ArrayList<List<String>>();
        // fake 71 columns  for
        for (int j = 0; j < 10; j++) {
            List<String> cols = new ArrayList<String>();
            for (int i = 0; i < 71; i++) {
             cols.add("a-" + j + "-" + i);
            }
            greetingList.add(cols);
        } 

        //
       try (OutputStream os = Files.newOutputStream(Paths.get("result.xlsx"))) {
          excelExport(greetingList, os);
       } catch (Exception e) {
        e.printStackTrace(); 
          System.err.println(e);
       } 
    }


    public static OutputStream excelExport(List<List<String>> errorMessage, OutputStream outputStream) {
 
        // File file = null;
        // try {
        //     // Excelテンプレートの位置
        //     file = App.class.getre("test.xlsx");
        // } catch (FileNotFoundException e1) {
        //     e1.printStackTrace();
        // }
        // FileInputStream fileInputStream;
 
        try(InputStream fileInputStream = App.class.getResourceAsStream("/test.xlsx")) {
            // fileInputStream = new FileInputStream(file);
            Workbook workBook = new XSSFWorkbook(fileInputStream);
            Font font = workBook.createFont();
            // Excel文書のフォント
            font.setFontName("Meiryo");
            font.setFontHeightInPoints((short) 10);
            // 最初のシートを選んで操作します
            Sheet sheet = workBook.getSheetAt(0);
            // Excelのフォントとサイズを設定する
            CellStyle cellStyle = workBook.createCellStyle();
            cellStyle.setFont(font);
            cellStyle.setWrapText(true);
            cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);
            sheet.createFreezePane(4, 1);
            // Excelにデータを書き込む
            for (int i = 0; i < errorMessage.size(); i++) {
                sheet.getRow(0);
                Row row = sheet.createRow(1 + i);
                List<String> rowErrors = errorMessage.get(i);
                for (int j = 0; j < rowErrors.size(); j++) {
                    Cell cell = row.createCell(j);
                    if (rowErrors.get(j) !=null && rowErrors.get(j).length()>0) {
                        try {
                            cell.setCellValue(rowErrors.get(j));
                        } catch (NullPointerException e) {
                            cell.setCellValue("");
                        }
                    } else {
                        cell.setCellValue("");
                    }
                    cell.setCellStyle(cellStyle);
                }
            }
            // 自動改行表示の設定
            for (int i = 0; i < sheet.getRow(0).getLastCellNum(); i++) {
                Row row = sheet.getRow(0);
                Cell cell = row.getCell(i);
                cell.setCellStyle(cellStyle);
                sheet.autoSizeColumn(i);
            }
            workBook.write(outputStream);
            workBook.close();
            fileInputStream.close();
            outputStream.flush();
            outputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return outputStream;
    }
}
